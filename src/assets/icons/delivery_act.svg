<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script>
  <g id="delivery_act" transform="translate(-284 -111)">
    <rect id="Rectangle_6564" data-name="Rectangle 6564" width="24" height="24" transform="translate(284 111)" fill="#fff" opacity="0"/>
    <g id="main" transform="translate(287.726 114.861)">
      <g id="Group_15180" data-name="Group 15180">
        <path id="Path_60012" data-name="Path 60012" d="M51.656,48.767,49.71,47.65a.27.27,0,0,0-.381.123c-.827,1.835-.79,1.654-.79,2.01A1.74,1.74,0,0,0,52,50.034a1.509,1.509,0,0,0-.346-1.268Z" transform="translate(-35.642 -35.239)" fill="#fff"/>
        <path id="Path_60018" data-name="Path 60018" d="M.814,0h3.8a.814.814,0,0,1,.814.814V3.8a.814.814,0,0,1-.814.814H.814A.814.814,0,0,1,0,3.8V.814A.814.814,0,0,1,.814,0Z" transform="translate(0 3.798)" fill="#fff"/>
        <path id="Path_60019" data-name="Path 60019" d="M1.357,0A1.357,1.357,0,1,1,0,1.357,1.357,1.357,0,0,1,1.357,0Z" transform="translate(7.325)" fill="#fff"/>
        <path id="Path_60013" data-name="Path 60013" d="M18.349,51.9H15.41a.27.27,0,0,0-.27.27v.647a1.74,1.74,0,1,0,3.479,0v-.647a.27.27,0,0,0-.27-.27Z" transform="translate(-11.303 -38.362)" fill="#fff"/>
      </g>
      <path id="Path_60014" data-name="Path 60014" d="M49.025,45.633a1.891,1.891,0,0,0-1.84-.118l-1.413,1.81c-.168.215.025.886.161,1.171a.27.27,0,0,0,.466.038,2.9,2.9,0,0,1,3.341-.894.27.27,0,0,0,.385-.269,2.194,2.194,0,0,0-1.1-1.739Z" transform="translate(-33.577 -33.579)" fill="#fec8aa"/>
      <path id="Path_60015" data-name="Path 60015" d="M28.49,15.415A4.4,4.4,0,0,1,26.116,14.1a1,1,0,0,0-.547-1.034.987.987,0,0,0-1.389.677l-.778,3.72a.809.809,0,0,0,.7.969l1.334.148a.27.27,0,0,1,.241.283l-.241,4.069a.27.27,0,0,0,.27.286h1.083a.27.27,0,0,0,.269-.242l.5-4.7a.809.809,0,0,0-.522-.842l-1.329-.5a.269.269,0,0,1-.169-.312l.2-.872a4.6,4.6,0,0,0,2.676,1,.27.27,0,0,0,.27-.27v-.808a.27.27,0,0,0-.2-.26Z" transform="translate(-17.311 -9.995)" fill="#fff"/>
      <path id="Path_60016" data-name="Path 60016" d="M21.8,26.5a3.247,3.247,0,0,1-1.084-2.4h.52a.811.811,0,0,0,.812-.809V22.75a.811.811,0,0,0-.812-.809H19.336a.27.27,0,0,0-.27.27v7H16.793a.215.215,0,0,1-.122-.036,1.512,1.512,0,0,1-.606-2.012.27.27,0,0,0-.248-.377H12.37a.27.27,0,0,0-.222.116c-.159.228-1.539,2.263-1.161,3.444a1.074,1.074,0,0,0,.959.752H20.19c.271,0,2.341-1.859,2.325-3.292A1.607,1.607,0,0,0,21.8,26.5Z" transform="translate(-8.23 -16.531)" fill="#fff2eb"/>
      <path id="Path_60017" data-name="Path 60017" d="M16.6,34.85H12.272a.271.271,0,0,0-.27.272,1.617,1.617,0,0,0,1.616,1.616H16.6a.27.27,0,0,0,.27-.27V35.12a.27.27,0,0,0-.27-.27Z" transform="translate(-9.017 -25.937)" fill="#fec8aa"/>
    </g>
  </g>
</svg>